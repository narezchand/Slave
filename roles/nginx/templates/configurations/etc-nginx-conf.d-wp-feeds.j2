  location ~* (?:atom(?:/|\.xml)?(?:/index.php)?|feed(?:/|\.xml|/rss2?/?|/rdf/?|/podcast/?)?(?:/index\.php|.+\.xml)?|index\.rdf|sitemap(?:.+)?\.xml) {
    ## set feedburner for cache key
    ## this way we aren't caching a 307
    set $is_feedburner 0;
    if ($http_user_agent ~* "feedburner") {
      set $is_feedburner 1;
    }

    ## cache responses in the short zone - feeds should always
    ## be cached - they dont vary on user agent or if you're logged in
    fastcgi_cache_key    "$request_method:$is_feedburner:$scheme:$host$request_uri";
    fastcgi_cache        fastcgi_cache;
    fastcgi_cache_bypass $_output_cache;
    fastcgi_no_cache     $_output_cache;

    ## max size, if larger - just stream the asset
    fastcgi_max_temp_file_size  2m;

    ## let the browser know we vary on encoding only (not cookie or user agent)
    more_set_headers  "Vary: Accept-Encoding";
    more_set_headers  -s '200 301' "Cache-Control: public, max-age=900, must-revalidate";
    more_set_headers  -s '200 301 307 404' "X-Cache-Status: $upstream_cache_status";

    ## ignore and hide backend headers
    fastcgi_ignore_headers  Expires Cache-Control Set-Cookie Vary;
    fastcgi_hide_header     Expires;
    fastcgi_hide_header     Cache-Control;
    fastcgi_hide_header     Set-Cookie;
    fastcgi_hide_header     Vary;
    fastcgi_hide_header     Pragma;
    fastcgi_hide_header     Last-Modified;
    fastcgi_hide_header     ETag;

    ## how to cache various responses
    fastcgi_cache_valid     200 301 15m;
    fastcgi_cache_valid     302 307 404 1m;

    # set ENV vars for PHP
    include         /etc/nginx/fastcgi_params;
    fastcgi_param   SCRIPT_FILENAME     $document_root/index.php;
    fastcgi_param   SCRIPT_NAME         /index.php;
    fastcgi_param   PATH_INFO           $path_info if_not_empty;
    fastcgi_param   SERVER_PORT         $http_x_forwarded_port;
    fastcgi_param   HTTPS               $https_forwarded if_not_empty;

    # send to PHP-FPM
    fastcgi_pass    unix:/var/www/$_application/tmp/php5-fpm.sock;
    break;
  }
